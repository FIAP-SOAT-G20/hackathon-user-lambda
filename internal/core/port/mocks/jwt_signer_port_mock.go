// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/jwt_signer_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/jwt_signer_port.go -destination=internal/core/port/mocks/jwt_signer_port_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJWTSigner is a mock of JWTSigner interface.
type MockJWTSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWTSignerMockRecorder
	isgomock struct{}
}

// MockJWTSignerMockRecorder is the mock recorder for MockJWTSigner.
type MockJWTSignerMockRecorder struct {
	mock *MockJWTSigner
}

// NewMockJWTSigner creates a new mock instance.
func NewMockJWTSigner(ctrl *gomock.Controller) *MockJWTSigner {
	mock := &MockJWTSigner{ctrl: ctrl}
	mock.recorder = &MockJWTSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTSigner) EXPECT() *MockJWTSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockJWTSigner) Sign(userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockJWTSignerMockRecorder) Sign(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockJWTSigner)(nil).Sign), userID)
}

// Verify mocks base method.
func (m *MockJWTSigner) Verify(tokenStr string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", tokenStr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockJWTSignerMockRecorder) Verify(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJWTSigner)(nil).Verify), tokenStr)
}
