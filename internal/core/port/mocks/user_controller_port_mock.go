// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/user_controller_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/user_controller_port.go -destination=internal/core/port/mocks/user_controller_port_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/hackathon-user-lambda/internal/core/dto"
	port "github.com/FIAP-SOAT-G20/hackathon-user-lambda/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
	isgomock struct{}
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// GetMe mocks base method.
func (m *MockUserController) GetMe(ctx context.Context, p port.Presenter, userID int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx, p, userID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUserControllerMockRecorder) GetMe(ctx, p, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUserController)(nil).GetMe), ctx, p, userID)
}

// Login mocks base method.
func (m *MockUserController) Login(ctx context.Context, p port.Presenter, in dto.LoginInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, p, in)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserControllerMockRecorder) Login(ctx, p, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserController)(nil).Login), ctx, p, in)
}

// Register mocks base method.
func (m *MockUserController) Register(ctx context.Context, p port.Presenter, in dto.RegisterInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, p, in)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserControllerMockRecorder) Register(ctx, p, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserController)(nil).Register), ctx, p, in)
}
